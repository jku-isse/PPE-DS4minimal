/* The following code was generated by JFlex 1.4.3 on 19/04/2023, 10:56 */

package at.jku.isse.designspace.rule.arl.parser;

import at.jku.isse.designspace.rule.arl.exception.ParsingException;

/**
 * This class is a lexical scanner for ARL input
 */


public class ArlScanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\0\1\54"+
    "\4\0\1\12\5\11\1\4\1\7\1\11\12\6\1\33\1\11\1\30"+
    "\1\32\1\31\2\11\1\46\1\5\1\40\1\5\1\10\6\5\1\36"+
    "\1\37\5\5\1\35\1\42\6\5\1\11\1\53\1\11\1\34\1\5"+
    "\1\0\1\26\1\5\1\41\1\27\1\22\1\44\1\5\1\45\1\16"+
    "\1\47\1\5\1\21\1\17\1\13\1\14\1\20\1\5\1\25\1\23"+
    "\1\15\1\43\1\50\1\52\1\24\1\51\1\5\3\11\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\1\4\1\5\2\3\1\6"+
    "\13\4\4\3\10\4\1\7\1\10\1\1\1\0\1\5"+
    "\1\11\1\12\1\13\3\4\1\14\2\4\1\15\2\4"+
    "\1\16\14\4\1\17\1\20\1\21\1\22\1\23\11\4"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\0\1\32"+
    "\6\4\1\33\5\4\1\34\1\4\1\35\2\4\1\36"+
    "\1\37\1\4\1\40\6\4\1\0\1\12\1\41\1\42"+
    "\1\43\1\44\3\4\1\45\7\4\1\46\10\4\1\47"+
    "\11\4\1\50\1\51\1\4\1\52\2\4\1\53\2\4"+
    "\1\54\1\55\1\56\3\4\1\57\1\60\1\61\4\4"+
    "\1\62\2\4\1\63\2\4\1\64\1\4\1\65\1\66";

  private static int [] zzUnpackAction() {
    int [] result = new int[181];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\55\0\132\0\207\0\132\0\264\0\341\0\u010e"+
    "\0\u013b\0\132\0\132\0\u0168\0\u0195\0\u01c2\0\u01ef\0\u021c"+
    "\0\u0249\0\u0276\0\u02a3\0\u02d0\0\u02fd\0\u032a\0\u0357\0\u0384"+
    "\0\u03b1\0\u03de\0\u040b\0\u0438\0\u0465\0\u0492\0\u04bf\0\u04ec"+
    "\0\u0519\0\u0546\0\u0573\0\132\0\u05a0\0\u05cd\0\u05fa\0\132"+
    "\0\u0627\0\132\0\u0654\0\u0681\0\u06ae\0\341\0\u06db\0\u0708"+
    "\0\341\0\u0735\0\u0762\0\341\0\u078f\0\u07bc\0\u07e9\0\u0816"+
    "\0\u0843\0\u0870\0\u089d\0\u08ca\0\u08f7\0\u0924\0\u0951\0\u097e"+
    "\0\132\0\132\0\132\0\132\0\132\0\u09ab\0\u09d8\0\u0a05"+
    "\0\u0a32\0\u0a5f\0\u0a8c\0\u0ab9\0\u0ae6\0\u0b13\0\132\0\132"+
    "\0\132\0\132\0\132\0\132\0\u0b40\0\341\0\u0b6d\0\u0b9a"+
    "\0\u0bc7\0\u0bf4\0\u0c21\0\u0c4e\0\341\0\u0c7b\0\u0ca8\0\u0cd5"+
    "\0\u0d02\0\u0d2f\0\341\0\u0d5c\0\341\0\u0d89\0\u0db6\0\341"+
    "\0\341\0\u0de3\0\341\0\u0e10\0\u0e3d\0\u0e6a\0\u0e97\0\u0ec4"+
    "\0\u0ef1\0\u0f1e\0\u0f1e\0\341\0\341\0\341\0\341\0\u0f4b"+
    "\0\u0f78\0\u0fa5\0\341\0\u0fd2\0\u0fff\0\u102c\0\u1059\0\u1086"+
    "\0\u10b3\0\u10e0\0\341\0\u110d\0\u113a\0\u1167\0\u1194\0\u11c1"+
    "\0\u11ee\0\u121b\0\u1248\0\341\0\u1275\0\u12a2\0\u12cf\0\u12fc"+
    "\0\u1329\0\u1356\0\u1383\0\u13b0\0\u13dd\0\341\0\341\0\u140a"+
    "\0\341\0\u1437\0\u1464\0\341\0\u1491\0\u14be\0\341\0\341"+
    "\0\341\0\u14eb\0\u1518\0\u1545\0\341\0\341\0\341\0\u1572"+
    "\0\u159f\0\u15cc\0\u15f9\0\341\0\u1626\0\u1653\0\341\0\u1680"+
    "\0\u16ad\0\341\0\u16da\0\341\0\341";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[181];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\2\5\1\6\1\7\1\10\1\11\1\7"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\2\7\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\12\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\6\7\1\3\1\13\1\43\2\3"+
    "\7\43\1\44\40\43\1\45\1\44\57\0\1\5\56\0"+
    "\1\46\1\0\1\47\22\0\1\50\30\0\2\7\1\0"+
    "\1\7\2\0\15\7\5\0\16\7\7\0\1\7\1\10"+
    "\1\51\1\7\2\0\15\7\5\0\16\7\11\0\1\52"+
    "\52\0\2\7\1\0\1\7\2\0\1\7\1\53\5\7"+
    "\1\54\5\7\5\0\6\7\1\55\7\7\7\0\2\7"+
    "\1\0\1\7\2\0\12\7\1\56\2\7\5\0\16\7"+
    "\7\0\2\7\1\0\1\7\2\0\12\7\1\57\2\7"+
    "\5\0\10\7\1\60\5\7\7\0\2\7\1\0\1\7"+
    "\2\0\1\61\1\7\1\62\1\7\1\63\10\7\5\0"+
    "\7\7\1\64\6\7\7\0\2\7\1\0\1\7\2\0"+
    "\7\7\1\65\5\7\5\0\16\7\7\0\2\7\1\0"+
    "\1\7\2\0\1\66\5\7\1\67\2\7\1\70\3\7"+
    "\5\0\13\7\1\71\2\7\7\0\2\7\1\0\1\7"+
    "\2\0\7\7\1\72\5\7\5\0\16\7\7\0\2\7"+
    "\1\0\1\7\2\0\1\7\1\73\13\7\5\0\16\7"+
    "\7\0\2\7\1\0\1\7\2\0\7\7\1\74\5\7"+
    "\5\0\16\7\7\0\2\7\1\0\1\7\2\0\1\75"+
    "\5\7\1\76\1\7\1\77\4\7\5\0\16\7\7\0"+
    "\2\7\1\0\1\7\2\0\7\7\1\100\5\7\5\0"+
    "\16\7\33\0\1\101\1\102\54\0\1\103\55\0\1\104"+
    "\55\0\1\105\25\0\2\7\1\0\1\7\2\0\7\7"+
    "\1\106\5\7\5\0\16\7\7\0\2\7\1\0\1\7"+
    "\2\0\3\7\1\107\11\7\5\0\16\7\7\0\2\7"+
    "\1\0\1\7\2\0\13\7\1\110\1\7\5\0\16\7"+
    "\7\0\2\7\1\0\1\7\2\0\1\7\1\111\13\7"+
    "\5\0\16\7\7\0\2\7\1\0\1\7\2\0\1\7"+
    "\1\112\13\7\5\0\16\7\7\0\2\7\1\0\1\7"+
    "\2\0\15\7\5\0\6\7\1\113\7\7\7\0\2\7"+
    "\1\0\1\7\2\0\1\114\14\7\5\0\16\7\7\0"+
    "\2\7\1\0\1\7\2\0\1\7\1\115\11\7\1\116"+
    "\1\7\5\0\16\7\2\0\1\43\2\0\7\43\1\0"+
    "\40\43\14\0\1\117\1\120\1\0\1\121\7\0\1\122"+
    "\25\0\1\123\1\124\1\46\1\4\1\5\52\46\6\0"+
    "\1\47\1\51\53\0\1\51\1\0\1\125\11\0\1\125"+
    "\37\0\2\7\1\0\1\7\2\0\2\7\1\126\12\7"+
    "\5\0\16\7\7\0\2\7\1\0\1\7\2\0\11\7"+
    "\1\127\3\7\5\0\16\7\7\0\2\7\1\0\1\7"+
    "\2\0\6\7\1\130\6\7\5\0\16\7\7\0\2\7"+
    "\1\0\1\7\2\0\15\7\5\0\6\7\1\131\7\7"+
    "\7\0\2\7\1\0\1\7\2\0\7\7\1\132\5\7"+
    "\5\0\16\7\7\0\2\7\1\0\1\7\2\0\7\7"+
    "\1\133\5\7\5\0\16\7\7\0\2\7\1\0\1\7"+
    "\2\0\5\7\1\134\7\7\5\0\16\7\7\0\2\7"+
    "\1\0\1\7\2\0\2\7\1\135\12\7\5\0\16\7"+
    "\7\0\2\7\1\0\1\7\2\0\14\7\1\136\5\0"+
    "\16\7\7\0\2\7\1\0\1\7\2\0\10\7\1\137"+
    "\4\7\5\0\16\7\7\0\2\7\1\0\1\7\2\0"+
    "\3\7\1\140\11\7\5\0\16\7\7\0\2\7\1\0"+
    "\1\7\2\0\7\7\1\141\5\7\5\0\16\7\7\0"+
    "\2\7\1\0\1\7\2\0\6\7\1\142\6\7\5\0"+
    "\16\7\7\0\2\7\1\0\1\7\2\0\12\7\1\143"+
    "\2\7\5\0\16\7\7\0\2\7\1\0\1\7\2\0"+
    "\15\7\5\0\12\7\1\144\3\7\7\0\2\7\1\0"+
    "\1\7\2\0\14\7\1\145\5\0\16\7\7\0\2\7"+
    "\1\0\1\7\2\0\15\7\5\0\15\7\1\146\7\0"+
    "\2\7\1\0\1\7\2\0\15\7\5\0\1\147\15\7"+
    "\7\0\2\7\1\0\1\7\2\0\15\7\5\0\7\7"+
    "\1\150\6\7\7\0\2\7\1\0\1\7\2\0\2\7"+
    "\1\151\12\7\5\0\16\7\7\0\2\7\1\0\1\7"+
    "\2\0\10\7\1\152\4\7\5\0\16\7\7\0\2\7"+
    "\1\0\1\7\2\0\5\7\1\153\7\7\5\0\16\7"+
    "\7\0\2\7\1\0\1\7\2\0\6\7\1\154\6\7"+
    "\5\0\16\7\7\0\2\7\1\0\1\7\2\0\6\7"+
    "\1\155\6\7\5\0\16\7\7\0\2\7\1\0\1\7"+
    "\2\0\5\7\1\156\7\7\5\0\16\7\7\0\2\7"+
    "\1\0\1\7\2\0\2\7\1\157\12\7\5\0\16\7"+
    "\7\0\2\7\1\0\1\7\2\0\12\7\1\160\2\7"+
    "\5\0\16\7\7\0\2\7\1\0\1\7\2\0\6\7"+
    "\1\161\6\7\5\0\16\7\6\0\1\162\1\0\1\163"+
    "\53\0\2\7\1\0\1\7\2\0\2\7\1\164\12\7"+
    "\5\0\16\7\7\0\2\7\1\0\1\7\2\0\6\7"+
    "\1\165\6\7\5\0\16\7\7\0\2\7\1\0\1\7"+
    "\2\0\7\7\1\166\5\7\5\0\16\7\7\0\2\7"+
    "\1\0\1\7\2\0\1\167\14\7\5\0\16\7\7\0"+
    "\2\7\1\0\1\7\2\0\12\7\1\170\2\7\5\0"+
    "\16\7\7\0\2\7\1\0\1\7\2\0\6\7\1\171"+
    "\6\7\5\0\16\7\7\0\2\7\1\0\1\7\2\0"+
    "\3\7\1\172\11\7\5\0\16\7\7\0\2\7\1\0"+
    "\1\7\2\0\7\7\1\173\5\7\5\0\16\7\7\0"+
    "\2\7\1\0\1\7\2\0\10\7\1\174\4\7\5\0"+
    "\16\7\7\0\2\7\1\0\1\7\2\0\1\175\11\7"+
    "\1\176\2\7\5\0\16\7\7\0\2\7\1\0\1\7"+
    "\2\0\7\7\1\177\5\7\5\0\16\7\7\0\2\7"+
    "\1\0\1\7\2\0\7\7\1\200\5\7\5\0\16\7"+
    "\7\0\2\7\1\0\1\7\2\0\13\7\1\201\1\7"+
    "\5\0\16\7\7\0\2\7\1\0\1\7\2\0\1\7"+
    "\1\202\13\7\5\0\16\7\7\0\2\7\1\0\1\7"+
    "\2\0\2\7\1\203\12\7\5\0\16\7\7\0\2\7"+
    "\1\0\1\7\2\0\6\7\1\204\6\7\5\0\16\7"+
    "\7\0\2\7\1\0\1\7\2\0\6\7\1\205\6\7"+
    "\5\0\16\7\7\0\2\7\1\0\1\7\2\0\6\7"+
    "\1\206\6\7\5\0\16\7\7\0\2\7\1\0\1\7"+
    "\2\0\3\7\1\207\11\7\5\0\16\7\7\0\2\7"+
    "\1\0\1\7\2\0\15\7\5\0\11\7\1\210\4\7"+
    "\7\0\2\7\1\0\1\7\2\0\10\7\1\211\4\7"+
    "\5\0\16\7\10\0\1\163\53\0\2\7\1\0\1\7"+
    "\2\0\13\7\1\212\1\7\5\0\16\7\7\0\2\7"+
    "\1\0\1\7\2\0\3\7\1\213\11\7\5\0\16\7"+
    "\7\0\2\7\1\0\1\7\2\0\15\7\5\0\7\7"+
    "\1\214\6\7\7\0\2\7\1\0\1\7\2\0\2\7"+
    "\1\215\12\7\5\0\16\7\7\0\2\7\1\0\1\7"+
    "\2\0\2\7\1\216\12\7\5\0\16\7\7\0\2\7"+
    "\1\0\1\7\2\0\15\7\5\0\14\7\1\217\1\7"+
    "\7\0\2\7\1\0\1\7\2\0\15\7\5\0\4\7"+
    "\1\220\11\7\7\0\2\7\1\0\1\7\2\0\15\7"+
    "\5\0\4\7\1\221\11\7\7\0\2\7\1\0\1\7"+
    "\2\0\15\7\5\0\14\7\1\222\1\7\7\0\2\7"+
    "\1\0\1\7\2\0\1\7\1\223\13\7\5\0\16\7"+
    "\7\0\2\7\1\0\1\7\2\0\7\7\1\224\5\7"+
    "\5\0\16\7\7\0\2\7\1\0\1\7\2\0\7\7"+
    "\1\225\5\7\5\0\16\7\7\0\2\7\1\0\1\7"+
    "\2\0\7\7\1\226\5\7\5\0\16\7\7\0\2\7"+
    "\1\0\1\7\2\0\6\7\1\227\6\7\5\0\16\7"+
    "\7\0\2\7\1\0\1\7\2\0\6\7\1\230\6\7"+
    "\5\0\16\7\7\0\2\7\1\0\1\7\2\0\7\7"+
    "\1\231\5\7\5\0\16\7\7\0\2\7\1\0\1\7"+
    "\2\0\2\7\1\232\12\7\5\0\16\7\7\0\2\7"+
    "\1\0\1\7\2\0\7\7\1\233\5\7\5\0\16\7"+
    "\7\0\2\7\1\0\1\7\2\0\10\7\1\234\4\7"+
    "\5\0\16\7\7\0\2\7\1\0\1\7\2\0\15\7"+
    "\5\0\6\7\1\235\7\7\7\0\2\7\1\0\1\7"+
    "\2\0\2\7\1\236\12\7\5\0\16\7\7\0\2\7"+
    "\1\0\1\7\2\0\2\7\1\237\12\7\5\0\16\7"+
    "\7\0\2\7\1\0\1\7\2\0\2\7\1\240\12\7"+
    "\5\0\16\7\7\0\2\7\1\0\1\7\2\0\10\7"+
    "\1\241\4\7\5\0\16\7\7\0\2\7\1\0\1\7"+
    "\2\0\1\242\14\7\5\0\16\7\7\0\2\7\1\0"+
    "\1\7\2\0\15\7\5\0\4\7\1\243\11\7\7\0"+
    "\2\7\1\0\1\7\2\0\15\7\5\0\4\7\1\244"+
    "\11\7\7\0\2\7\1\0\1\7\2\0\6\7\1\245"+
    "\6\7\5\0\16\7\7\0\2\7\1\0\1\7\2\0"+
    "\7\7\1\246\5\7\5\0\16\7\7\0\2\7\1\0"+
    "\1\7\2\0\10\7\1\247\4\7\5\0\16\7\7\0"+
    "\2\7\1\0\1\7\2\0\13\7\1\250\1\7\5\0"+
    "\16\7\7\0\2\7\1\0\1\7\2\0\3\7\1\251"+
    "\11\7\5\0\16\7\7\0\2\7\1\0\1\7\2\0"+
    "\15\7\5\0\11\7\1\252\4\7\7\0\2\7\1\0"+
    "\1\7\2\0\2\7\1\253\12\7\5\0\16\7\7\0"+
    "\2\7\1\0\1\7\2\0\2\7\1\254\12\7\5\0"+
    "\16\7\7\0\2\7\1\0\1\7\2\0\6\7\1\255"+
    "\6\7\5\0\16\7\7\0\2\7\1\0\1\7\2\0"+
    "\4\7\1\256\10\7\5\0\16\7\7\0\2\7\1\0"+
    "\1\7\2\0\10\7\1\257\4\7\5\0\16\7\7\0"+
    "\2\7\1\0\1\7\2\0\3\7\1\260\11\7\5\0"+
    "\16\7\7\0\2\7\1\0\1\7\2\0\6\7\1\261"+
    "\6\7\5\0\16\7\7\0\2\7\1\0\1\7\2\0"+
    "\7\7\1\262\5\7\5\0\16\7\7\0\2\7\1\0"+
    "\1\7\2\0\1\7\1\263\13\7\5\0\16\7\7\0"+
    "\2\7\1\0\1\7\2\0\15\7\5\0\14\7\1\264"+
    "\1\7\7\0\2\7\1\0\1\7\2\0\1\265\14\7"+
    "\5\0\16\7\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5895];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\1\11\4\1\2\11\30\1\1\11"+
    "\1\1\1\0\1\1\1\11\1\1\1\11\26\1\5\11"+
    "\11\1\6\11\1\0\34\1\1\0\103\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[181];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private StringBuffer string = new StringBuffer();
    private int stringPos = 0;

    private ArlToken createToken(int kind, String stringValue) {
        return createToken(kind, 0, 0.0, stringValue);
    }

    private ArlToken createToken(int kind, long longValue) {
        return createToken(kind, longValue, 0.0, null);
    }

    private ArlToken createToken(int kind, double doubleValue) {
        return createToken(kind, 0, doubleValue, null);
    }

    private ArlToken createToken(int kind) {
        return createToken(kind, 0, 0.0, null);
    }

    private ArlToken createToken(int kind, long longValue, double doubleValue, String stringValue) {
        return createToken(kind, yychar, yylength(), longValue, doubleValue, stringValue);

    }

    private ArlToken createToken(int kind, int pos, int length, long longValue, double doubleValue, String stringValue) {
        return new ArlToken(kind, pos, length, longValue, doubleValue, stringValue);
    }

    public int getLine() {
        return yyline;
    }

    public int getColumn() {
        return yycolumn;
    }

    private void error() {
        throw new ParsingException(yyline, yycolumn, "illegal character '%s' while parsing", yytext());
    }




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ArlScanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public ArlScanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 138) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public ArlToken yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 2: 
          { /* ignore */
          }
        case 55: break;
        case 52: 
          { return createToken(ArlTokenKind.EVERYTIME);
          }
        case 56: break;
        case 40: 
          { return createToken(ArlTokenKind.TUPLE);
          }
        case 57: break;
        case 37: 
          { return createToken(ArlTokenKind.ELSE);
          }
        case 58: break;
        case 9: 
          { return createToken(ArlTokenKind.ARROW);
          }
        case 59: break;
        case 27: 
          { return createToken(ArlTokenKind.LET);
          }
        case 60: break;
        case 49: 
          { return createToken(ArlTokenKind.IMPLIES);
          }
        case 61: break;
        case 36: 
          { return createToken(ArlTokenKind.THEN);
          }
        case 62: break;
        case 28: 
          { return createToken(ArlTokenKind.XOR);
          }
        case 63: break;
        case 53: 
          { return createToken(ArlTokenKind.EVENTUALLY);
          }
        case 64: break;
        case 22: 
          { string.append('\t');
          }
        case 65: break;
        case 51: 
          { return createToken(ArlTokenKind.ASSOONAS);
          }
        case 66: break;
        case 31: 
          { return createToken(ArlTokenKind.SET);
          }
        case 67: break;
        case 3: 
          { return createToken(yytext().charAt(0));
          }
        case 68: break;
        case 24: 
          { string.append('\\');
          }
        case 69: break;
        case 41: 
          { return createToken(ArlTokenKind.UNTIL);
          }
        case 70: break;
        case 23: 
          { string.append('\r');
          }
        case 71: break;
        case 39: 
          { return createToken(ArlTokenKind.ENDIF);
          }
        case 72: break;
        case 46: 
          { return createToken(ArlTokenKind.ALWAYS);
          }
        case 73: break;
        case 16: 
          { return createToken(ArlTokenKind.LEQ);
          }
        case 74: break;
        case 11: 
          { return createToken(ArlTokenKind.DOUBLEDOT);
          }
        case 75: break;
        case 25: 
          { string.append('\"');
          }
        case 76: break;
        case 10: 
          { return createToken(ArlTokenKind.REAL, Double.parseDouble(yytext()));
          }
        case 77: break;
        case 54: 
          { return createToken(ArlTokenKind.COLLECTION);
          }
        case 78: break;
        case 8: 
          { yybegin(YYINITIAL); return createToken(ArlTokenKind.STRING, stringPos, yychar-stringPos+yytext().length(), 0, 0.0, string.toString());
          }
        case 79: break;
        case 20: 
          { string.append('\'');
          }
        case 80: break;
        case 34: 
          { return createToken(ArlTokenKind.NULL);
          }
        case 81: break;
        case 43: 
          { return createToken(ArlTokenKind.EXISTS);
          }
        case 82: break;
        case 19: 
          { return createToken(ArlTokenKind.DOUBLEHAT);
          }
        case 83: break;
        case 32: 
          { return createToken(ArlTokenKind.MAP);
          }
        case 84: break;
        case 26: 
          { return createToken(ArlTokenKind.NOT);
          }
        case 85: break;
        case 29: 
          { return createToken(ArlTokenKind.AND);
          }
        case 86: break;
        case 42: 
          { return createToken(ArlTokenKind.FALSE);
          }
        case 87: break;
        case 48: 
          { return createToken(ArlTokenKind.ITERATE);
          }
        case 88: break;
        case 6: 
          { string.setLength(0); stringPos = yychar; yybegin(STRING);
          }
        case 89: break;
        case 21: 
          { string.append('\n');
          }
        case 90: break;
        case 47: 
          { return createToken(ArlTokenKind.FORALL);
          }
        case 91: break;
        case 14: 
          { return createToken(ArlTokenKind.IF);
          }
        case 92: break;
        case 38: 
          { return createToken(ArlTokenKind.LIST);
          }
        case 93: break;
        case 45: 
          { return createToken(ArlTokenKind.REJECT);
          }
        case 94: break;
        case 5: 
          { return createToken(ArlTokenKind.INTEGER, Long.parseLong(yytext()));
          }
        case 95: break;
        case 12: 
          { return createToken(ArlTokenKind.OR);
          }
        case 96: break;
        case 18: 
          { return createToken(ArlTokenKind.DOUBLECOLON);
          }
        case 97: break;
        case 13: 
          { return createToken(ArlTokenKind.IN);
          }
        case 98: break;
        case 17: 
          { return createToken(ArlTokenKind.GEQ);
          }
        case 99: break;
        case 1: 
          { error();
          }
        case 100: break;
        case 50: 
          { return createToken(ArlTokenKind.COLLECT);
          }
        case 101: break;
        case 4: 
          { return createToken(ArlTokenKind.NAME, yytext());
          }
        case 102: break;
        case 44: 
          { return createToken(ArlTokenKind.SELECT);
          }
        case 103: break;
        case 15: 
          { return createToken(ArlTokenKind.NEQ);
          }
        case 104: break;
        case 30: 
          { return createToken(ArlTokenKind.DEF);
          }
        case 105: break;
        case 33: 
          { return createToken(ArlTokenKind.NEXT);
          }
        case 106: break;
        case 7: 
          { string.append( yytext() );
          }
        case 107: break;
        case 35: 
          { return createToken(ArlTokenKind.TRUE);
          }
        case 108: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {
                return createToken(ArlTokenKind.ENDINPUT);
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
